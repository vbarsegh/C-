1))ifndef and pragma once

Характеристика	        #pragma once	                        #ifndef / #define / #endif
Читаемость	            Простая и короткая запись	            Более длинный код
Универсальность	        Зависит от компилятора	                Поддерживается везде
Производительность	    Более быстрая (работает с файлами)	    Может быть медленнее (работает с макросами)
Дублирование имён	    Нет риска конфликтов	                Возможен конфликт имён макросов
Трудоёмкость написания	Минимальная	                            Требует правильного именования макроса
Поддержка стандартов	Не стандарт C++	                        Стандартная техника


#pragma once
Особенности:
Простота: Всего одна строка, нет необходимости прописывать имена макросов.
Поддерживается большинством современных компиляторов (например, GCC, Clang, MSVC).
Работает на уровне файловой системы (компилятор проверяет путь к файлу), что делает её более быстрой и эффективной.
```Когда компилятор встречает #pragma once в заголовочном файле, он запоминает, что этот файл уже был обработан.
Вместо того чтобы проверять макросы (как в случае с #ifndef / #define), он смотрит на путь файла. Если файл уже обрабатывался, его содержимое больше не включается.
Эта проверка зависит от файловой системы: компилятор просто смотрит на то, где находится файл (его абсолютный путь, включая имя).
Компилятор встречает #pragma once и запоминает путь файла (например, /project/includes/myheader.hpp).


#ifndef / #define / #endif:
Используется, если есть необходимость в совместимости с очень старыми компиляторами (до C++11).
Важно выбирать уникальные имена для макросов, чтобы избежать конфликтов.




2)include with <> and "" (kardal tarberutyunnery)
Функционал	            #include <...>	                        #include "..."
Поиск	                Только в системных каталогах.	        Сначала в текущей папке, затем в системных.
Предназначение	        Стандартные библиотеки.	                Пользовательские заголовки.
Практика	            Для библиотек STL, OpenGL и других.	    Для файлов проекта.
//vorpes sahmanum karanq asenq vor ete ""senca demic gnuma mana gali yntaciqk proekti fayleri mej,u ete chi gtnum
gnuma arden Стандартные библиотекa-neri meja pntrum
#include "iostream"
то это будет работать корректно, потому что:

Компилятор сначала ищет iostream в текущей директории (где находится твой исходный файл).
Если файл не найден в текущей директории, компилятор продолжает искать в стандартных системных каталогах, где находится стандартная библиотека C++.
Даже если ты используешь кавычки "...", компилятор найдёт iostream в системной папке после проверки текущей директории.

Когда это может вызвать проблемы?:
Если в текущей директории у тебя есть пользовательский файл с именем iostream (например, ./iostream), компилятор подключит его вместо стандартной библиотеки, и это приведёт к ошибкам (или непредсказуемому поведению).

3))C akan structuran C++ akanic classic toli clasic

4))kampilacman pulery
xxxxxxxxxxx




///////////////////
const char* Bureaucrat::GradeTooLowException::what() const throw() {
    return "Grade is too low!";
}
Метод what() гарантирует, что не будет выбрасывать никаких исключений. Это важно, потому что:

Метод what() вызывается, когда уже произошло исключение, и попытка выбросить новое исключение внутри него могла бы привести к краху программы.
Спецификация throw() сообщает программистам и компилятору, что этот метод безопасен.
////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////
S.No.	Exception	    		Description
1.	std::exception				An exception and parent class of all the standard C++ exceptions.
2.	std::bad_alloc				This exception can be thrown by new.
3.	std::bad_cast				This exception can be thrown by dynamic_cast.
4.	std::bad_exception			This exception is a useful device to handle unexpected exceptions in a C++ program.
5.	std::bad_typeid				This can be thrown by type id.
6.	std::logic_error			An exception that can be detected by reading the code.
7.	std::domain_error			This is an exception thrown when a mathematically invalid domain is used.
8.	std::invalid_argument		This exception is thrown due to invalid arguments.
9.	std::length_error			This exception is thrown when a too big std::string is created.
10.	std::out_of_range			This can be thrown by the ‘at’ method, for example a std::vector and std::bitset<>::operator[]().
11.	std::runtime_error			An exception that theoretically cannot be detected by reading the code
12.	std::overflow_error			This is thrown if a mathematical overflow occurs.
13.	std::range_error			This occurs when you try to store a value that is out of range.
14.	std::underflow_error		This is thrown if a mathematical underflow occurs.

std::exception
   ├── std::bad_alloc
   ├── std::bad_cast
   ├── std::bad_typeid
   ├── std::bad_exception
   ├── std::logic_error
   │       ├── std::domain_error
   │       ├── std::invalid_argument
   │       ├── std::length_error
   │       └── std::out_of_range
   └── std::runtime_error
           ├── std::overflow_error
           ├── std::range_error
           └── std::underflow_error
